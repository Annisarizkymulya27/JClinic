// <auto-generated />
using System;
using JClinic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JClinic.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("JClinic.Models.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("appointDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("appointStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("details")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Tb_Appointment");
                });

            modelBuilder.Entity("JClinic.Models.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("depDescription")
                        .HasColumnType("text");

                    b.Property<string>("depName")
                        .HasColumnType("text");

                    b.Property<bool>("depStatus")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Tb_Department");
                });

            modelBuilder.Entity("JClinic.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("consulCharge")
                        .HasColumnType("int");

                    b.Property<string>("docAddress")
                        .HasColumnType("text");

                    b.Property<bool>("docStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("doctorEdu")
                        .HasColumnType("text");

                    b.Property<string>("doctorName")
                        .HasColumnType("text");

                    b.Property<string>("fkDepartmentId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("noHp")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("fkDepartmentId");

                    b.ToTable("Tb_Doctor");
                });

            modelBuilder.Entity("JClinic.Models.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("gender")
                        .HasColumnType("text");

                    b.Property<int>("height")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<DateTime>("regisdate")
                        .HasColumnType("datetime");

                    b.Property<int>("weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tb_Patient");
                });

            modelBuilder.Entity("JClinic.Models.Roles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tb_Roles");
                });

            modelBuilder.Entity("JClinic.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RolesId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Username");

                    b.HasIndex("RolesId");

                    b.ToTable("Tb_User");
                });

            modelBuilder.Entity("JClinic.Models.Appointment", b =>
                {
                    b.HasOne("JClinic.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("JClinic.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("JClinic.Models.Doctor", b =>
                {
                    b.HasOne("JClinic.Models.Department", "fkDepartment")
                        .WithMany()
                        .HasForeignKey("fkDepartmentId");

                    b.Navigation("fkDepartment");
                });

            modelBuilder.Entity("JClinic.Models.User", b =>
                {
                    b.HasOne("JClinic.Models.Roles", "Roles")
                        .WithMany()
                        .HasForeignKey("RolesId");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
